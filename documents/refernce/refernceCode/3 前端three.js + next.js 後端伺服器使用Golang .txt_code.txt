# 前端 (TypeScript + Next.js + Three.js)
# // components/Card.tsx
# import { useRef, useEffect } from 'react';
# import * as THREE from 'three';
# const Card: React.FC = () => {
#   const mountRef = useRef<HTMLDivElement>(null);
#   useEffect(() => {
#     const scene = new THREE.Scene();
#     const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
#     const renderer = new THREE.WebGLRenderer();
#     renderer.setSize(window.innerWidth, window.innerHeight);
#     mountRef.current?.appendChild(renderer.domElement);
#     const geometry = new THREE.BoxGeometry(1, 1.5, 0.1); // 卡牌形狀
#     const material = new THREE.MeshBasicMaterial({ color: 0xff0000 });
#     const card = new THREE.Mesh(geometry, material);
#     scene.add(card);
#     camera.position.z = 5;
#     const animate = () => {
#       requestAnimationFrame(animate);
#       card.rotation.y += 0.01; // 旋轉動畫
#       renderer.render(scene, camera);
#     };
#     animate();
#   }, []);
#   return <div ref={mountRef} />;
# };
# export default Card;

# // pages/index.tsx (使用 Card component)
# import dynamic from 'next/dynamic';
# const Card = dynamic(() => import('../components/Card'), { ssr: false });
# export default function Home() {
#   return (
#     <div>
#       <Card />
#     </div>
#   );
# }

# 後端 (Golang + Gin)
# package main
# import "github.com/gin-gonic/gin"
# func main() {
#     r := gin.Default()
#     r.GET("/ai/move", func(c *gin.Context) {
#         playerHP := c.Query("player_hp")
#         opponentHP := c.Query("opponent_hp")
#         move := computeBestMove(playerHP, opponentHP)
#         c.JSON(200, gin.H{"move": move})
#     })
#     r.Run(":8080")
# }
# func computeBestMove(playerHP, opponentHP string) int {
#     // 實現 AI 邏輯 (Go)
#     return 1
# }

# 前端優化 - 簡化幾何體 (Three.js)
# const geometry = new THREE.PlaneGeometry(1, 1.5);

# 前端優化 - 紋理壓縮 (Three.js)
# const texture = new THREE.TextureLoader().load('card.webp');

# 前端優化 - 合併渲染 (Three.js)
# const sprite = new THREE.Sprite(new THREE.SpriteMaterial({ map: texture }));

# 前端優化 - 幀率控制 (Three.js)
# let lastTime = 0;
# const animate = (time: number) => {
#   requestAnimationFrame(animate);
#   if (time - lastTime > 1000 / 30) { // ~30 FPS
#     renderer.render(scene, camera);
#     lastTime = time;
#   }
# };

# 前端優化 - SSG (Next.js)
# export async function getStaticProps() {
#   const cardData = await fetchCards();
#   return { props: { cardData } };
# }

# 前端優化 - 動態載入 (Next.js)
# import dynamic from 'next/dynamic';
# const Card = dynamic(() => import('../components/Card'), { ssr: false });

# 前端優化 - 記憶體管理 (Three.js)
# scene.remove(card);
# card.geometry.dispose();
# card.material.dispose();

# 前端優化 - 觸控 (react-three-fiber)
# import { Canvas } from '@react-three/fiber';
# function Scene() {
#   return (
#     <Canvas>
#       <mesh onClick={() => playCard()} onPointerDown={() => playCard()}> {/* 兼容 Click 和 Touch */} 
#         <planeGeometry args={[1, 1.5]} />
#         <meshBasicMaterial color="red" />
#       </mesh>
#     </Canvas>
#   );
# }

# 後端優化 - 原生 Go AI + 並行化
# package main
# import ("math/rand"; "sync")
# type GameState struct { PlayerHP, OpponentHP int }
# func simulateGame(state GameState, iterations int) int {
#     score := 0
#     for i := 0; i < iterations; i++ { score += rand.Intn(2) }
#     return score
# }
# func computeBestMove(state GameState, iterations int) int {
#     bestMove, bestScore := 0, -1e9
#     moves := []int{1, 2, 3}
#     for _, move := range moves {
#         // 實際應複製 state 並模擬 move
#         score := float64(simulateGame(state, iterations))
#         if score > bestScore { bestScore, bestMove = score, move }
#     }
#     return bestMove
# }
# func parallelMCTS(state GameState, iterations int) int {
#     var wg sync.WaitGroup
#     scores := make(chan int, iterations)
#     for i := 0; i < iterations; i++ {
#         wg.Add(1)
#         go func() {
#             defer wg.Done()
#             scores <- rand.Intn(2) // 模擬單次遊戲
#         }()
#     }
#     wg.Wait()
#     close(scores)
#     total := 0
#     for score := range scores { total += score }
#     // 根據 total 分數選擇最佳 move
#     return total // 簡化返回總分
# }

# 後端優化 - gRPC 整合 (Go Client)
# import (
#     "context"
#     "log"
#     "google.golang.org/grpc"
#     pb "path/to/ai_service"
# )
# func callPythonAI(playerHP, opponentHP int) int {
#     conn, err := grpc.Dial("python-service:50051", grpc.WithInsecure())
#     if err != nil { log.Fatalf("Failed to connect: %v", err) }
#     defer conn.Close()
#     client := pb.NewAIServiceClient(conn)
#     resp, err := client.ComputeMove(context.Background(), &pb.MoveRequest{
#         PlayerHP: int32(playerHP), OpponentHP: int32(opponentHP),
#     })
#     if err != nil { log.Fatalf("Failed to compute move: %v", err) }
#     return int(resp.Move)
# }

# 後端優化 - gRPC 整合 (Python Server with FastAPI)
# # ai_service.py
# from fastapi import FastAPI
# import ai # Cython 模組
# app = FastAPI()
# @app.get("/compute_move") # 應為 gRPC 服務，此處用 HTTP 示意
# async def compute_move(player_hp: int, opponent_hp: int):
#     return {"move": ai.compute_best_move(player_hp, opponent_hp, 1000)}

# 後端優化 - WASM 整合 (Go Runtime)
# import "github.com/bytecodealliance/wasmtime-go"
# func runWASM() int {
#     engine := wasmtime.NewEngine()
#     module, _ := wasmtime.NewModuleFromFile(engine, "ai.wasm")
#     store := wasmtime.NewStore(engine)
#     instance, _ := wasmtime.NewInstance(store, module, nil)
#     computeMove := instance.GetFunc(store, "compute_best_move")
#     result, _ := computeMove.Call(store, 30, 30, 1000)
#     return int(result.(int32)) // 假設 WASM 返回 i32
# }

# 後端優化 - 快取 (Go sync.Map)
# import ("fmt"; "sync")
# var stateCache sync.Map
# func evaluateState(state GameState) float64 {
#     hash := fmt.Sprintf("%d:%d", state.PlayerHP, state.OpponentHP)
#     if val, ok := stateCache.Load(hash); ok {
#         return val.(float64)
#     }
#     value := float64(state.PlayerHP - state.OpponentHP) // 實際評估邏輯
#     stateCache.Store(hash, value)
#     return value
# }

# 後端優化 - WebSocket (Go gorilla/websocket)
# import ("github.com/gorilla/websocket"; "net/http"; "log")
# var upgrader = websocket.Upgrader{}
# func handleWebSocket(w http.ResponseWriter, r *http.Request) {
#     conn, err := upgrader.Upgrade(w, r, nil)
#     if err != nil { log.Println(err); return }
#     defer conn.Close()
#     for {
#         var state GameState
#         err := conn.ReadJSON(&state)
#         if err != nil {
#             if websocket.IsUnexpectedCloseError(err, websocket.CloseGoingAway, websocket.CloseAbnormalClosure) {
#                 log.Printf("error: %v", err)
#             }
#             break
#         }
#         move := computeBestMove(state, 1000)
#         err = conn.WriteJSON(map[string]int{"move": move})
#         if err != nil { log.Println(err); break }
#     }
# }
# func setupRoutes() {
#     http.HandleFunc("/ws", handleWebSocket)
#     log.Fatal(http.ListenAndServe(":8080", nil))
# }

# 手機優化 - 響應式 (JS/TS in Next.js)
# useEffect(() => {
#   const handleResize = () => {
#     renderer.setSize(window.innerWidth, window.innerHeight);
#     camera.aspect = window.innerWidth / window.innerHeight;
#     camera.updateProjectionMatrix();
#   };
#   window.addEventListener('resize', handleResize);
#   return () => window.removeEventListener('resize', handleResize);
# }, [renderer, camera]);

# 手機優化 - 電池 (react-three-fiber)
# import { useFrame } from '@react-three/fiber';
# let needsUpdate = true; // 控制更新標誌
# useFrame((state, delta) => {
#   if (needsUpdate) {
#     // card.rotation.y += delta; // 使用 delta 時間
#     state.invalidate(); // 請求重新渲染
#     needsUpdate = false; // 重置標誌，直到下次需要更新
#   }
# });

# 進階 AI - Go 神經網路 (gorgonia)
# import "gorgonia.org/gorgonia"
# func evaluateNeuralNetwork(state GameState) float64 {
#     g := gorgonia.NewGraph()
#     // ... 定義和加載模型 ...
#     // x := gorgonia.NewVector(g, gorgonia.Float64, gorgonia.WithShape(2), gorgonia.WithValue([]float64{float64(state.PlayerHP), float64(state.OpponentHP)}))
#     // ... 執行模型推理 ...
#     return 0.0
# }

# 進階 AI - Go ONNX 推理 (onnx-go)
# import (
#     "github.com/owulveryck/onnx-go"
#     "github.com/owulveryck/onnx-go/backend/x/gorgonnx"
#     // ... 其他導入 ...
# )
# func runONNXModel(state GameState) float64 {
#     backend := gorgonnx.NewGraph()
#     model := onnx.NewModel(backend)
#     // ... 加載 onnx 文件 ...
#     // inputData := []float32{float32(state.PlayerHP), float32(state.OpponentHP)}
#     // inputTensor := // ... 創建輸入張量 ...
#     // err := model.SetInput(0, inputTensor)
#     // err = backend.Run()
#     // outputTensor, err := model.GetOutputTensors() 
#     // ... 處理輸出 ...
#     return 0.0
# }

# 範例流程 - 前端 (Next.js + R3F)
# // pages/index.tsx
# import { Canvas } from '@react-three/fiber';
# export default function Home() {
#   const handleClick = async () => {
#     const res = await fetch('/api/move?player_hp=30&opponent_hp=30'); // 使用 Next.js API route
#     const { move } = await res.json();
#     console.log(`AI move: ${move}`);
#   };
#   return (
#     <Canvas style={{ height: "100vh" }}>
#       <ambientLight />
#       <pointLight position={[10, 10, 10]} />
#       <mesh onClick={handleClick} onPointerDown={handleClick}>
#         <planeGeometry args={[1, 1.5]} />
#         <meshStandardMaterial color="orange" />
#       </mesh>
#     </Canvas>
#   );
# }

# 範例流程 - 後端 (Go + Gin API route)
# // main.go (假設與 Next.js API route 分開部署)
# package main
# import (
#     "github.com/gin-gonic/gin"
#     "strconv"
#     "net/http"
# )
# type GameState struct { PlayerHP, OpponentHP int }
# func computeBestMove(state GameState, iterations int) int { return 1 }
# func main() {
#     r := gin.Default()
#     r.GET("/api/move", func(c *gin.Context) {
#         playerHP, _ := strconv.Atoi(c.Query("player_hp"))
#         opponentHP, _ := strconv.Atoi(c.Query("opponent_hp"))
#         move := computeBestMove(GameState{PlayerHP: playerHP, OpponentHP: opponentHP}, 1000)
#         c.JSON(http.StatusOK, gin.H{"move": move})
#     })
#     r.Run(":8080")
# } 